# -*- coding: utf-8 -*-
"""imageSimilarity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JE89BqbnM9V_Tonq5GbjW5kxMYO1f92E
"""

import torch
from torch import nn
from torch.utils.data import Dataset, DataLoader

"""#Dataset/Dataloader"""

BATCH_SIZE=16

class CustomDataset(Dataset):
  def __init__(self):
    self.image1=torch.rand(64, 3, 512, 512)
    self.image2=torch.rand(64, 3, 512, 512)
    self.label=torch.rand(64, 1)

  def __len__(self):
    return len(self.label)

  def __getitem__(self, idx):
    return self.image1[idx], self.image2[idx], self.label[idx]
dataset=CustomDataset()

trainSplit=.8

trainSize = int(trainSplit * len(dataset))
testSize = len(dataset) - trainSize
trainDataset, testDataset = torch.utils.data.random_split(dataset, [trainSize, testSize])

trainDataloader=DataLoader(trainDataset,batch_size=BATCH_SIZE,shuffle=True)
testDataloader=DataLoader(testDataset,batch_size=BATCH_SIZE,shuffle=True)

"""#Model

##Sub Models
"""

class ConvLayer(nn.Module):
  def __init__(self, input, output, kernal, stride=1):
    super(ConvLayer, self).__init__()
    self.sequential=nn.Sequential(
      nn.Conv2d(input, output, kernal, stride),
      nn.ReLU(),
    )

  def forward(self, input):
    return self.sequential(input)

class LinearLayer(nn.Module):
  def __init__(self, input, output):
    super(LinearLayer, self).__init__()
    self.sequential=nn.Sequential(
      nn.Linear(input, output),
      nn.ReLU(),
    )
  def forward(self, input):
    return self.sequential(input)

"""##Main Model"""

class SiameseModel(nn.Module):
  def __init__(self, input, hiddenSize ,output):
    super(SiameseModel, self).__init__()

    self.sequential=nn.Sequential(
      ConvLayer(input, hiddenSize, 11),

      nn.LocalResponseNorm(5,alpha=0.0001,beta=0.75,k=2),

      nn.MaxPool2d(2),

      ConvLayer(hiddenSize, hiddenSize, 5),


      nn.LocalResponseNorm(5,alpha=0.0001,beta=0.75,k=2),

      nn.MaxPool2d(2),

      nn.Dropout(.3),

      ConvLayer(hiddenSize, hiddenSize, 3),
      ConvLayer(hiddenSize, hiddenSize, 3),

      nn.MaxPool2d(2),

      nn.Dropout(.3),

      nn.Flatten(),

      LinearLayer(3481, 1024),
      nn.Dropout(.3),


      LinearLayer(1024, output)

    )
  def forward(self, image):
    return self.sequential(image)

model=SiameseModel(3, 8, 2)
image=torch.rand(3,512,512)
model(image).shape

def parametersCount(model):
  return sum(p.numel() for p in model.parameters() if p.requires_grad)
print(f"model parameters: {parametersCount(model):,}")
